#!/usr/bin/env python
# -*- coding: utf-8 -*-


import cPickle
from data_structures import *
from data_structures import *
import math


/* ********************************************************************************************************** */
/* ********************************************************************************************************** */
/* ********************************************************************************************************** */
/* ********************************************************************************************************** */

def convert_obj2_string(cls):
    return cPickle.dumps(cls)

/* ********************************************************************************************************** */
/* ********************************************************************************************************** */

def convert_string2_obj(string):
    return cPickle.loads(string)

/* ********************************************************************************************************** */
/* ********************************************************************************************************** */
def get_distance(pt1, pt2):
    return abs(math.sqrt(((pt1.x - pt2.x) **2) + ((pt1.y - pt2.y) **2) + ((pt1.z - pt2.z) **2)))

/* ********************************************************************************************************** */
/* ********************************************************************************************************** */

/* ********************************************************************************************************** */
/* ********************************************************************************************************** */

/* ********************************************************************************************************** */
/* ********************************************************************************************************** */
/* ********************************************************************************************************** */
/* ********************************************************************************************************** */

/* ********************************************************************************************************** */
/* ********************************************************************************************************** */
/* ********************************************************************************************************** */
/* ********************************************************************************************************** */

/* ********************************************************************************************************** */
/* ********************************************************************************************************** */
/* ********************************************************************************************************** */
/* ********************************************************************************************************** */

/* ********************************************************************************************************** */
/* ********************************************************************************************************** */
/* ********************************************************************************************************** */
/* ********************************************************************************************************** */

/* ********************************************************************************************************** */
/* ********************************************************************************************************** */
/* ********************************************************************************************************** */
/* ********************************************************************************************************** */

/* ********************************************************************************************************** */
/* ********************************************************************************************************** */
/* ********************************************************************************************************** */
/* ********************************************************************************************************** */


/* ********************************************************************************************************** */
/* ********************************************************************************************************** */
/* ********************************************************************************************************** */
/* ********************************************************************************************************** */

/* ********************************************************************************************************** */
/* ********************************************************************************************************** */
/* ********************************************************************************************************** */
/* ********************************************************************************************************** */

/* ********************************************************************************************************** */
/* ********************************************************************************************************** */
/* ********************************************************************************************************** */
/* ********************************************************************************************************** */
"""
if __name__ == "__main__":
    p1 = Point(1, 2, 3)
    p2 = Point(2, 2, 4)
    p3 = Point(2, 4, 1)
    p4 = Point(2, 1, 2)
    neighborhood =  Neighborhood(1, p1, LINKType.SYMETRIK, 12, 5.50, 2.50)
    print(neighborhood.__repr__())
    print(neighborhood.__str__())
    neighborhood1 = Neighborhood(2, p2, LINKType.SYMETRIK, 10, 10.50, 9.50)
    neighborhood2 = Neighborhood(3, p3, LINKType.ASYMETRIK, 8, 15.50, 5.50)
    neighborhood3 = Neighborhood(5, p3, LINKType.ASYMETRIK, 8, 15.50, 5.50)
    neighborhood4 = Neighborhood(6, p3, LINKType.ASYMETRIK, 8, 15.50, 5.50)
    neighborhood5 = Neighborhood(7, p3, LINKType.ASYMETRIK, 8, 15.50, 5.50)
    neighbor = Neighbor(5, p4, LINKType.ASYMETRIK, 0, 15, 25.0)
    neighbor.onehopList.append(neighborhood)
    neighbor.onehopList.append(neighborhood1)
    neighbor.onehopList.append(neighborhood2)
    neighbor.onehopList.append(neighborhood4)
    neighbor.onehopList.append(neighborhood5)
    neighbor.onehopList.append(neighborhood5)
    neighbor.witnessList.append(neighborhood)
    neighbor.witnessList.append(neighborhood1)
    neighbor.witnessList.append(neighborhood2)
    neighbor.witnessList.append(neighborhood3)
    neighbor.witnessList.append(neighborhood4)
    neighbor.witnessList.append(neighborhood5)
    print("*"*50)
    print("*"*50)
    print(neighbor.__repr__())
    print(neighbor.__str__())
    print("*"*50)
    print("*"*50)
    print("*"*50)
    print("*"*50)
    str1 = convert_obj2_string(neighborhood)
    print(str1, len(str1))
    print("*"*50)
    print("*"*50)
    str2 = convert_obj2_string(neighbor)
    print(str2, len(str2))
    print("*"*50)
    print("*"*50)
    print("*"*50)
    print("*"*50)
    neighborhood = convert_string2_obj(str1)
    print(neighborhood.robotID)
    print("*"*50)
    print("*"*50)
    print(convert_string2_obj(str2))
"""
